var NetHook = {};

function wrapNetServerListen(_net) {
  if (!_net || typeof _net.Server !== 'function') {
    throw new Error('Errsole Internal: Invalid _net module provided');
  }
  const originalListenMethod = _net.Server.prototype.listen;
  _net.Server.prototype.listen = function(...args) {
    let port;
    if (process.env.ERRSOLE_PORTS) {
      const portsMap = JSON.parse(process.env.ERRSOLE_PORTS);
      if (args[0] && typeof args[0] === 'object' && !isNaN(args[0].port)) {
        port = args[0].port;
        if (portsMap[port.toString()]) {
          args[0].port = portsMap[port.toString()];
        }
      } else if (!isNaN(args[0])) {
        port = args[0];
        if (portsMap[port.toString()]) {
          args[0] = portsMap[port.toString()];
        }
      }
    } else {
      if (args.length > 0 && typeof args[0] === 'object' && !isNaN(args[0].port)) {
        port = args[0].port;
      } else if (args.length > 0 && typeof args[0] === 'number') {
        port = args[0];
      }
    }
    originalListenMethod.apply(this, args);
  };
  return _net;
}


NetHook.packages = [{
    name: 'net',
    wrapper: wrapNetServerListen
  }
];

module.exports = NetHook;
