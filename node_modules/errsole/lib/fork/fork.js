'use strict'

var ChildProcess = require('child_process');
var Debugger = require('../main/inspector');
var Ipc = require('./ipc');
var Http = require('./http');
const path = require('path');
var appConfig = require('../config');

var Fork = function (options) {
  this._debuggerSessionId = options.debuggerSessionId;
  this._executeCodeRestricted = options.executeCodeRestricted;
  this._mainProcessPort = options.mainProcessPort;
  this._ports = options.ports;
  this._debugPort = options.debugPort;
  this._forkedProcess = null;
  this._status = null;
}

Fork.prototype.start = async function() {
  var self = this;
  return new Promise(async function(resolve, reject) {
    var appStartFile;
    const mainDirectory = appConfig.getMainDirectory();
    if (require && require.main && require.main.filename) {
      appStartFile = require.main.filename;
    } else if (process.argv[1]) {
      const fileExtension = path.extname(process.argv[1]).toLowerCase();
      const allowedExtensions = ['.js', '.mjs', '.cjs'];
      if (allowedExtensions.includes(fileExtension) && process.argv[1].includes(mainDirectory)) {
        appStartFile = process.argv[1];
      } else {
        reject(new Error('Errsole Internal Error: Unable to start the child process.'));
        return;
      }
    } else {
      reject(new Error('Errsole Internal Error: Unable to start the child process.'));
      return;
    }

    if (!appStartFile) {
      reject(new Error('Errsole Internal Error: Unable to start the child process.'));
      return;
    }

    var args = process.argv.slice(2);
    var options = getForkOptions(self._debuggerSessionId, self._mainProcessPort, self._ports, self._debugPort);
    self._forkedProcess = ChildProcess.fork(appStartFile, args, options);

    try {
      var isProcessStarted = await self._isChildProcessStarted();
      if(!isProcessStarted) {
        self._forkedProcess.kill('SIGINT');
        reject(new Error('Errsole Internal Error: Unable to start the child process.'));
        return;
      }
    } catch(e) {
      reject(new Error('Errsole Internal Error: Unable to start the child process.'));
      return;
    }

    try {
      var isDebuggerStarted = await self._isDebuggerStarted();
      if(!isDebuggerStarted) {
        self._forkedProcess.kill('SIGINT');
        reject(new Error('Errsole Internal Error: Unable to start the debugger for child process.'));
        return;
      }
    } catch(e) {
      self._forkedProcess.kill('SIGINT');
      reject(new Error('Errsole Internal Error: Unable to start the debugger for child process.'));
      return;
    }

    self.Http = new Http(self._mainProcessPort, self._ports, options);
    resolve(true);
  });
}


Fork.prototype._isChildProcessStarted = function() {
  var self = this;
  self.Ipc = new Ipc(self._forkedProcess);
  return new Promise(function(resolve, reject) {
    self.Ipc.onChildProcessStartSuccess(function(data) {
      resolve(true);
    });
    self.Ipc.onChildProcessStartFailure(function(data) {
      reject(false);
    });
  })
}


Fork.prototype._isDebuggerStarted = function() {
  var self = this;
  return new Promise(function(resolve, reject) {
    try {
      self.Debugger = new Debugger(self._debugPort, self._debuggerSessionId, self._forkedProcess, self._executeCodeRestricted);
      self.Debugger.on('debuggerStarted', function(data) {
        if(data.debuggerSessionId == self._debuggerSessionId) {
          var isDebuggerStarted = data.status;
          if(isDebuggerStarted) {
            resolve(true);
          } else {
            reject(false);
          }
        } else {
          reject(false);
        }
      });
    } catch (err) {
      console.error(new Error('Errsole Internal Error: '+(err.message || err.toString())+'. Please report the issue at https://github.com/errsole/errsole/issues'));
      reject(false);
    }
  });
}

function getForkOptions(debuggerSessionId, mainProcessPort, ports, debugPort) {
  var appProcessPort = ports[mainProcessPort];
  var options = {
    env: Object.assign({}, process.env || {}, {
      ERRSOLE_FORK: "true",
      ERRSOLE_DEBUGSESSION_ID: debuggerSessionId,
      ERRSOLE_MAIN_APP_PORT: mainProcessPort,
      ERRSOLE_APP_PORT: appProcessPort,
      ERRSOLE_PORTS: JSON.stringify(ports)
    })
  }
  options.appProcessPort = appProcessPort;
  options.ports = Object.keys(ports).map(val => ports[val]);
  options.execArgv = process.execArgv.slice();
  options.execArgv.push('--inspect=' + debugPort);
  options.silent = true;
  return options;
}

module.exports = Fork;
