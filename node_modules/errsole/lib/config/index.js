'use strict';

const slash = require('slash');

var appConfig = {
  "sessionAPIServer"          : "api.errsole.com",
  "domain"                    : "https://www.errsole.com",
  "appToken"                  : null,
  "frameworkName"             : "",
  "appProcessId"              : null,
  "appId"                     : null,
  "statusCodes"               : [],
  "mainDirectory"             : null,
  "mainProcessPort"           : null,
  "wrappedPorts"              : [],
  "invokeType"                : "roundrobin",
  "nodeFrameworkKeys"         : {},
  "sessionName"               : "errsole.sid",
  "pendingHTTPRequests"       : {},
  "logFileRoundTime"          : 5,
  "logFileTTL"                : 30,
  "version"                   : "",
  "enableDebugger"            : true,
  "evalExpression"            : false,
  "verifyCodeSnippetStatus"   : null,
  "filterRoutes"              : [],
  "skipRoutes"                : [],
  "exitOnException"           : true,
  "enableSessionLogs"         : true,
  "minResponseTimeThreshold"  : 100,  // minimum 100 (in milliseconds)
  "responseTimeThreshold"     : 1000, // default 1000 (in milliseconds)
  "slowRequestsTimeInterval"  : 24, // default 24 (in hours)
  "maxRequestsInInterval"     : 25, // default 25 (no. of slow requests in an interval)
  "collectLogs"               : ['info', 'error']
}


module.exports = {
  addMainProcessPort: function(port) {
    appConfig.mainProcessPort = port;
  },
  getMainProcessPort: function() {
    return appConfig.mainProcessPort;
  },
  addWrappedPorts: function(port) {
    appConfig.wrappedPorts.push(port);
  },
  getWrappedPorts: function() {
    return appConfig.wrappedPorts;
  },
  getAppToken: function() {
    return appConfig.appToken;
  },
  setAppProcessId: function(appProcessId) {
    appConfig.appProcessId = appProcessId;
  },
  setAppId: function(appId) {
    appConfig.appId = appId;
  },
  setStatusCodes: function(statusCodes) {
    appConfig.statusCodes = statusCodes;
  },
  setMainDirectory: function(value) {
    appConfig.mainDirectory = slash(value);
  },
  setVerifyCodeSnippetStatus: function(status) {
    appConfig.verifyCodeSnippetStatus = status;
  },
  setFrameworkName: function(name) {
    appConfig.frameworkName = name;
  },
  getSessionAPIServer: function() {
    return appConfig.sessionAPIServer;
  },
  getSessionAPIServerPort: function() {
    return appConfig.sessionAPIServerPort;
  },
  getAppProcessId: function() {
    return appConfig.appProcessId;
  },
  getAppId: function() {
    return appConfig.appId;
  },
  getMainDirectory: function() {
    return appConfig.mainDirectory;
  },
  getRouterUrl: function() {
    return appConfig.routerURL;
  },
  getRouterRealm: function() {
    return appConfig.routerRealm;
  },
  getInvokeType: function() {
    return appConfig.invokeType;
  },
  getFrameworkName: function() {
    return appConfig.frameworkName;
  },
  setNodeFrameworkKeys: function(frameworkName, frameworkkeys) {
    appConfig.nodeFrameworkKeys[frameworkName] = frameworkkeys;
  },
  getDomain: function() {
    return appConfig.domain;
  },
  getSessionName: function() {
    return appConfig.sessionName;
  },
  sessionStore: null,
  getPendingHTTPRequests: function() {
    return appConfig.pendingHTTPRequests;
  },
  getLogFileRoundTime: function() {
    return appConfig.logFileRoundTime;
  },
  getLogFileTTL: function() {
    return appConfig.logFileTTL;
  },
  setVersion: function(version) {
    appConfig.version = version;
  },
  getVersion: function(version) {
    return appConfig.version;
  },
  setOptions: function(options) {
    appConfig.appToken = options.token;
    appConfig.enableDebugger = options.enableDebugger === undefined ? true :  options.enableDebugger;
    appConfig.evalExpression = options.evalExpression === undefined ? false :  options.evalExpression;
    appConfig.enableSessionLogs = options.enableSessionLogs === undefined ? true :  options.enableSessionLogs;
    if(options.responseTimeThreshold && !isNaN(options.responseTimeThreshold)) {
      if(options.responseTimeThreshold > appConfig.minResponseTimeThreshold) {
        appConfig.responseTimeThreshold = options.responseTimeThreshold;
      }
    }
    if(options.slowRequestsTimeInterval && !isNaN(options.slowRequestsTimeInterval)) {
      var validTimeInterval = [1,6,12,24];
      if(validTimeInterval.includes(options.slowRequestsTimeInterval)) {
        appConfig.slowRequestsTimeInterval = options.slowRequestsTimeInterval;
      }
    }
  },
  getOptions: function() {
    var options = {
      'enableDebugger': appConfig.enableDebugger,
      'evalExpression': appConfig.evalExpression
    }
    return options;
  },
  getEnableDebugger: function() {
    return appConfig.enableDebugger;
  },
  getEvalExpression: function() {
    return appConfig.evalExpression;
  },
  getVerifyCodeSnippetStatus: function() {
    return appConfig.verifyCodeSnippetStatus;
  },
  getFilterRoutes: function() {
    return appConfig.filterRoutes;
  },
  setFilterRoutes: function(filterRoutes) {
    if(filterRoutes && filterRoutes.length>0) {
      appConfig.filterRoutes = filterRoutes
    }
  },
  getSkipRoutes: function() {
    return appConfig.skipRoutes;
  },
  setSkipRoutes: function(skipRoutes) {
    if(skipRoutes && skipRoutes.length>0) {
      appConfig.skipRoutes = skipRoutes
    }
  },
  getExitOnExceptionStatus: function() {
    return appConfig.exitOnException;
  },
  setExitOnExceptionStatus: function(status) {
    if(status===true || status===false) {
      appConfig.exitOnException = status;
    }
  },
  getResponseTimeThreshold: function() {
    return appConfig.responseTimeThreshold;
  },
  getSlowRequestsTimeInterval: function() {
    return appConfig.slowRequestsTimeInterval;
  },
  getMaxRequestsInInterval: function() {
    return appConfig.maxRequestsInInterval;
  },
  getEnableSessionLogs: function() {
    return appConfig.enableSessionLogs;
  },
  setLoggingStatus: function(collectLogs) {
    if (collectLogs) {
      appConfig.collectLogs = updateCollectLogs(collectLogs)
    }
  },
  getLoggingStatus: function() {
    return appConfig.collectLogs;
  }
};

function updateCollectLogs(input) {
  if (!Array.isArray(input)) {
    input = [input];
  }
  if (input.length === 0) {
    return input;
  }
  input = input.map(level => String(level).toLowerCase());
  const allowedValues = ['info', 'error'];
  for (const level of input) {
    if (!allowedValues.includes(level)) {
      console.error("Invalid collectLogs. Allowed values are 'info' and 'error'.");
      return [];
    }
  }
  return input;
}
