'use strict'

var Hook = require('./hooks');
var EventCapture = require('./eventCapture');
var ForksManager = require('./forksManager');
var Server = require('./connection/server');
var appConfig = require('../config');
var pjson = require('../../package.json');
var frameworkList = ['express', 'sails', 'koa', 'nest'];

var Main = {};

Main.initialize = function(options) {
  var framework = options.framework || '';
  var token = options.token;
  var pkgVersion = pjson.version || '';
  var filterRoutes = options.filterRoutes || [];
  var skipRoutes = options.skipRoutes || [];
  var exitOnException = options.exitOnException;
  var collectLogs = options.collectLogs;

  if(!token || token == '') {
    throw new Error('App token is missing in the initialize function arguments. For more information, visit our documentation page at https://www.errsole.com');
  }

  if(frameworkList.includes(framework)) {
    appConfig.setFrameworkName(framework);
  }

  for(var key in filterRoutes) {
    if(!filterRoutes[key]['method'] || !filterRoutes[key]['path']) {
      throw new Error('Filter Routes schema is invalid. For more information, visit our documentation page at https://www.errsole.com');
    }
  }
  for(var key in skipRoutes) {
    if(!skipRoutes[key]['method'] || !skipRoutes[key]['path']) {
      throw new Error('Skip Routes schema is invalid. For more information, visit our documentation page at https://www.errsole.com');
    }
  }
  appConfig.setFilterRoutes(filterRoutes);
  appConfig.setSkipRoutes(skipRoutes);
  appConfig.setExitOnExceptionStatus(exitOnException);
  appConfig.setLoggingStatus(collectLogs);
  Hook.initialize();
  EventCapture.initialize();

  process.nextTick(function() {
    ForksManager.initialize();
    appConfig.setVersion(pkgVersion);
    appConfig.setOptions(options);
    Server.initialize(token);
  })
}

Main.setupHandler = function(app) {
  Hook.setupHandler(app)
}

Main.wrapPort = function(port) {
  appConfig.addWrappedPorts(port);
  return port;
}


module.exports = Main;
