'use strict'

var Autobahn = require('@errsole/autobahn');
var Https = require('https');
var Os = require('os');
var Path = require('path');
var terminalLink = require('terminal-link');
var chalk = require('chalk');
var appRoot = require('app-root-path');
const { io } = require("socket.io-client");

var appConfig = require('../../config');

var Events = require('../eventCapture/events');

var Server = {
  isWampConnected: false,
  isSocketIOConnected: false
};

var invokeType = {
  invoke: appConfig.getInvokeType()
};

Server.initialize = function (appToken) {
  Server.registerProcess(appToken)
  .then(function(result) {
    appConfig.setAppProcessId(result.processId);
    appConfig.setAppId(result.appId);
    if(appConfig.getLoggingStatus().length!==0) {
      Server.connectToAPISocket(result)
    } else {
      console.log(chalk.bold.blue('Errsole Notice: Log collection is currently disabled in the configuration.'));
    }
    return Server.connectToRouter(result);
  })
  .catch(function(err) {
    console.error(chalk.red('Errsole Internal Error: Error during initialization - ', err));
  });
}

Server.registerProcess = function(appToken) {
  return new Promise(function(resolve, reject) {
    var mainDirectory = appRoot.path;
    if (!mainDirectory) {
      if (require.main && require.main.filename) {
        mainDirectory = Path.dirname(require.main.filename);
      } else {
        const path = __dirname;
        const parts = path.split("node_modules");
        mainDirectory = parts[0];
      }
    }

    if (!mainDirectory) {
      reject(new Error('Errsole Internal Error: Error during initialization'));
    }

    var registrationPayload = {
    	data: {
    		type: 'processes',
    		attributes: {
    			appToken: appToken,
    			details: {
    				pid: process.pid,
            mainDirectory: mainDirectory,
    				nodeVersion: process.versions.node,
            errsoleVersion: appConfig.getVersion(),
    				v8Version: process.versions.v8,
    				osPlatform: process.platform,
    				processorArchitecture: process.arch,
            totalMemory: Os.totalmem(),
            freeMemory: Os.freemem(),
            cpus: JSON.stringify(Os.cpus()),
            networkInterfaces: JSON.stringify(Os.networkInterfaces())
    			}
    		}
    	}
    };
    appConfig.setMainDirectory(mainDirectory);
    var hostname = appConfig.getSessionAPIServer();
    var port = appConfig.getSessionAPIServerPort();
    var options = {
      "hostname": hostname,
      "path": '/apps/processes',
      "method": 'POST'
    };
    var req = Https.request(options, function(response) {
      var body;
      response.on('data', function(d) {
        if (body) {
          body += d;
        } else {
          body = d;
        }
      });
      response.on('end', function() {
        try {
          var payload = JSON.parse(body.toString());
          if(payload.errors) {
            if(payload.errors[0]) {
              reject(new Error('Errsole Internal Error: '+payload.errors[0].detail+'.'));
            }
          }
          var result = {
            processId: payload.data.attributes.processId,
            appId: payload.data.attributes.appId,
            appEnvironmentId: payload.data.attributes.appEnvironmentId,
            sessionToken: payload.data.attributes.token,
            routerURL: payload.data.attributes.routerURL,
            routerRealm: payload.data.attributes.routerRealm,
            socketioURL: payload.data.attributes.socketioURL
          };
          resolve(result);
        } catch (err) {
          reject(new Error('Errsole Internal Error: '+(err.message || err.toString())+'. Please report the issue at https://github.com/errsole/errsole/issues'));
        }
      });
    });

    req.on('error', function(err) {
      /* server connection reinitialize */
      if(err) {
        reinitialize();
      }
      reject(new Error('Errsole Internal Error: '+(err.message || err.toString())+'. Please report the issue at https://github.com/errsole/errsole/issues'));
    });

    req.write(JSON.stringify(registrationPayload));
    req.end();
  });
};


Server.connectToRouter = function(appProcessData) {
  initializeConstants(appProcessData.appId, appProcessData.processId, appProcessData.appEnvironmentId);
  var sessionToken = appProcessData.sessionToken;
  var routerURL = appProcessData.routerURL;
  var routerRealm = appProcessData.routerRealm;
  var Connection = new Autobahn.Connection({
    url: routerURL,
    realm: routerRealm,
    authmethods: ['ticket'],
    authid: 'module',
    max_retries: -1,
    onchallenge: function(session, method, extra) {
      return sessionToken;
    }
  });

  Connection.onopen = function (session, details) {
    Server.isWampConnected = true;
    var verifyCodeSnippetStatus = appConfig.getVerifyCodeSnippetStatus();
    var frameworkName = appConfig.getFrameworkName();
    if(verifyCodeSnippetStatus !== false) {
      if(Server.isSocketIOConnected) {
        console.log(chalk.bold.green('Errsole setup is ready.'));
      }
      Events.emit(Events.ROUTER_CONNECTION_ESTABLISHED);
    }
  };

  Connection.onclose = function (reason, details) {
    console.error(chalk.bold.red(new Error('Errsole Internal Error: '+(details.message || reason)+'. Please report the issue at https://github.com/errsole/errsole/issues')));
    /* server connection reinitialize */
    if(!details.will_retry) {
      reinitialize();
    }
  };

  Connection.open();
  Server.Connection = Connection;
};

function reinitialize() {
  console.log('errsole auto-reinitialize in '+ 300+'s ..');
  var appToken = appConfig.getAppToken();
  setTimeout(function() {
    Server.initialize(appToken);
  }, 300*1000);
}

function initializeConstants(appId, processId, appEnvironmentId) {
  Server.APP_ID = appId;
  Server.PROCESS_ID = processId;
  Server.ENV_ID = appEnvironmentId;

  /* call methods */
  Server.UNCAUGHT_EXCEPTION_HANDLER_URI = 'com.errsole.api.capture_uncaught_exception';
  Server.HTTP_EXCEPTION_URI = 'com.errsole.api.capture_http_error';
  Server.NODE_FRAMEWORK_KEYS = 'com.errsole.api.get_framework_schema_v2';
  Server.GET_EVENT_CAPTURE_CRITERIA_URI = 'com.errsole.api.get_http_request_capture_criteria';
  Server.EVENT_CAPTURE_CRITERIA_UPDATED_URI = 'com.errsole.api.apps.'+ Server.APP_ID+ '.environments.' + Server.ENV_ID + '.http_request_capture_criteria_updated';
  Server.START_DEBUGGER_URI = 'com.errsole.module.apps.' + Server.APP_ID + '.environments.' + Server.ENV_ID + '.start_debugger';
  Server.GET_SESSION_LOG_DATA = 'com.errsole.module.apps.' + Server.APP_ID + '.environments.' + Server.ENV_ID +'.processes.'+ Server.PROCESS_ID+'.get_log_data';
  Server.SEND_SLOW_REQUEST = 'com.errsole.api.capture_slow_request';
  Server.CAPTURE_STDOUT_URI = 'com.errsole.api.capture_stdout';
  Server.CAPTURE_STDERR_URI = 'com.errsole.api.capture_stderr';
}


Server.call = function(uri, args, kwargs) {
  return new Promise(function(resolve, reject) {
    if (!Server.Connection || !Server.Connection.isOpen) {
        reject(new Error('Errsole Internal Error: Failed to call the URI "'+uri+'". Errsole connection is not ready. Please report the issue at https://github.com/errsole/errsole/issues'));
    }
    try {
      Server.Connection.session.call(uri, args, kwargs)
      .then(function(result) {
        resolve(result)
      })
      .catch(function(error) {
        reject(error)
      })
    } catch (e) {
      reject(new Error('Errsole Internal Error: '+(e.message || e.toString())+'. Please report the issue at https://github.com/errsole/errsole/issues'));
    }
  })
};


Server.publish = function(uri, args, kwargs) {
  if (!Server.Connection || !Server.Connection.isOpen) {
    console.error(new Error('Errsole Internal Error: Failed to publish on the URI "'+uri+'". Errsole connection is not ready. Please report the issue at https://github.com/errsole/errsole/issues '));
  }
  try {
    return Server.Connection.session.publish(uri, args, kwargs);
  } catch (e) {
    console.error(new Error('Errsole Internal Error: '+(e.message || e.toString())+'. Please report the issue at https://github.com/errsole/errsole/issues'));
  }
};

Server.subscribe = function(uri, handler) {
  if (!Server.Connection || !Server.Connection.isOpen) {
    console.error(new Error('Errsole Internal Error: Failed to subscribe to the URI "'+uri+'". Errsole connection is not ready. Please report the issue at https://github.com/errsole/errsole/issues '));
  }
  try {
    return Server.Connection.session.subscribe(uri, handler);
  } catch (e) {
    console.error(new Error('Errsole Internal Error: '+(e.message || e.toString())+'. Please report the issue at https://github.com/errsole/errsole/issues'));
  }
};

Server.register = function(uri, handler, invokeType) {
  if (!Server.Connection || !Server.Connection.isOpen) {
    console.error(new Error('Errsole Internal Error: Failed to register the URI "'+uri+'". Errsole connection is not ready. Please report the issue at https://github.com/errsole/errsole/issues'));
  }
  try {
    Server.Connection.session.register(uri, handler, invokeType)
    .then(
     function (registration) {},
     function (e) {
       console.error(new Error('Errsole Internal Error: '+(e.error || e.toString())+'. Please report the issue at https://github.com/errsole/errsole/issues'));
     }
    );
  } catch (e) {
    console.error(new Error('Errsole Internal Error: '+(e.message || e.toString())+'. Please report the issue at https://github.com/errsole/errsole/issues'));
  }
};

Server.connectToAPISocket = function(appProcessData) {
  var sessionToken = appProcessData.sessionToken;
  var socketioURL = appProcessData.socketioURL;
  if(!socketioURL) {
    console.error(chalk.bold.red('Errsole Internal Error: Log collection failed due to an invalid socket URL.'));
  }
  var socket = io(socketioURL, {
    reconnection: true,
    reconnectionAttempts: Infinity,
    reconnectionDelay: 1000,
    reconnectionDelayMax: 5000,
    randomizationFactor: 0.5,
    transports: ['websocket'],
    auth: {
      token: sessionToken
    }
  });
  Server.socketio = socket;

  socket.on('com.errsole.api.socketio_authenticated', () => {
    Server.isSocketIOConnected = true;
    if(Server.isWampConnected) {
      console.log(chalk.bold.green('Errsole setup is ready.'));
    }
    Events.emit(Events.SOCKETIO_CONNECTION_STATUS_CHANGE, 'ready');
  })

  socket.on('disconnect', (reason) => {
    console.error(chalk.bold.red('Errsole Internal Error: Disconnected from Errsole log server. Reason: '+ reason));
    Events.emit(Events.SOCKETIO_CONNECTION_STATUS_CHANGE, 'unready');
  });

  socket.on('reconnect_attempt', (attemptNumber) => {
    console.log('Errsole Internal: Attempting to reconnect to Errsole log server. Attempt number: '+ attemptNumber);
  });

  socket.on('connect_error', (error) => {
    Events.emit(Events.SOCKETIO_CONNECTION_STATUS_CHANGE, 'unready');
    console.error('Errsole Internal Error: Connection Error:', error.message);
  });
}

Server.callSocketio = function(uri, data) {
  if (Server.socketio && Server.socketio.connected) {
    try {
      Server.socketio.emit(uri, data);
    } catch(err){}
  }
}

module.exports = Server;
