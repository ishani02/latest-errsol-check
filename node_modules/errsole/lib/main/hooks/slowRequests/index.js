'use strict'
const { v4: uuidv4 } = require('uuid');
var Server = require('../../connection/server');
var Events = require('../../eventCapture/events');
var appConfig = require('../../../config');

var SlowRequests = {};

SlowRequests.requestsList = [];
SlowRequests.currentClearingUTCDate = null;
SlowRequests.currentClearingUTCHour = null;

SlowRequests.addSlowHTTPRequest = function(data, responseTime) {
  try {
    var message = '';
    if(data.error && data.error.message) {
      message = data.error.message
    } else if(data.response && data.response.statusMessage) {
      message = data.response.statusMessage
    }
    if(data.request) {
      delete data.request.file;
      delete data.request.files;
    }
    var slowRequest = {
      id: uuidv4(),
      timestamp: new Date().getTime(),
      method: data.request.method,
      path: data.request.path,
      routePath: data.request.routePath,
      statusCode: data.response.statusCode,
      responseTime: responseTime,
      message: message,
      data: data
    }
    var intervalData = checkRequestReset();
    slowRequest['intervalDate'] = intervalData.intervalDate;
    slowRequest['intervalRange'] = intervalData.intervalRange;
    addSlowRequest(slowRequest);
  } catch(e) {
    console.error(e);
  }
}

SlowRequests.sendSlowRequest = function(data) {
  Events.emit(Events.ADD_HTTP_REQUEST_LOG, data);
}

var checkRequestReset = function() {
  var now = new Date();
  var utcFullYear = now.getUTCFullYear();
  var utcDate = now.getUTCDate();
  var utcMonth = now.getUTCMonth() + 1;
  var utcYear = now.getUTCFullYear();
  var currentUTCHour = now.getUTCHours();
  var utcFullDate = utcYear+'-'+utcMonth+'-'+utcDate;
  var slowRequestsTimeInterval = appConfig.getSlowRequestsTimeInterval();
  var clearingHour = Math.floor(currentUTCHour / slowRequestsTimeInterval) * slowRequestsTimeInterval;
  var currentUTCRange = Math.floor(currentUTCHour/slowRequestsTimeInterval)*slowRequestsTimeInterval + "-" + (Math.floor(currentUTCHour/slowRequestsTimeInterval)*slowRequestsTimeInterval + slowRequestsTimeInterval -1)

  if (SlowRequests.currentClearingUTCDate !== utcFullDate || SlowRequests.currentClearingUTCHour !== clearingHour) {
    SlowRequests.currentClearingUTCDate = utcFullDate;
    SlowRequests.currentClearingUTCHour = clearingHour;
    SlowRequests.requestsList = [];
  }
  return {
    'intervalDate': utcFullDate,
    'intervalRange': currentUTCRange
  }
}

var addSlowRequest = function(requestData) {
  var maxRequestsInInterval = appConfig.getMaxRequestsInInterval()
  if(requestData.method && requestData.path && requestData.responseTime) {
    var index = SlowRequests.requestsList.findIndex((request)=> request.path == requestData.path && request.method == requestData.method);
    if(SlowRequests.requestsList[index]) {
      if(SlowRequests.requestsList[index].responseTime < requestData.responseTime) {
        SlowRequests.requestsList[index] = requestData;
        Server.call(Server.SEND_SLOW_REQUEST, [], requestData).catch(console.error);
      }
    } else if(SlowRequests.requestsList.length < maxRequestsInInterval) {
      SlowRequests.requestsList.push(requestData);
      Server.call(Server.SEND_SLOW_REQUEST, [], requestData).catch(console.error);
    } else if(SlowRequests.requestsList[0].responseTime < requestData.responseTime) {
      SlowRequests.requestsList[0] = requestData;
      Server.call(Server.SEND_SLOW_REQUEST, [], requestData).catch(console.error);
    }
    // sort the slow requests dict
    SlowRequests.requestsList.sort((a, b) => {
      return a.responseTime - b.responseTime;
    });
  }
}

SlowRequests.checkSlowHTTPRequestExist = function(request, responseTime) {
  try {
    var requestData = {
      method: request.method,
      path: request.path,
      responseTime: responseTime
    }
    var intervalData = checkRequestReset();
    var maxRequestsInInterval = appConfig.getMaxRequestsInInterval()
    if(requestData.method && requestData.path && requestData.responseTime) {
      var index = SlowRequests.requestsList.findIndex((request)=> request.path == requestData.path && request.method == requestData.method);
      if(SlowRequests.requestsList[index] && SlowRequests.requestsList[index].responseTime >= requestData.responseTime) {
        return true;
      }
    }
    return false;
  } catch(e) {
    console.error(e);
    return false;
  }
}



module.exports = SlowRequests;
